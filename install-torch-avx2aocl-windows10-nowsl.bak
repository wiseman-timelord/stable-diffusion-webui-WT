:: Script: install-torch-avx2aocl-windows10-nonwsl.bat
@echo off
setlocal enabledelayedexpansion

:: Check for administrative privileges
net session >nul 2>&1
if %errorLevel% NEQ 0 (
    echo Error: Admin Required!
    echo Right Click, then Run As Administrator.
    timeout /t 3 >nul
    goto :end_of_file
)

:: Initialization
set "working_directory_location=%~dp0"
set "working_directory_location=%working_directory_location:~0,-1%"
pushd "%working_directory_location%"
echo Working Dir: "%working_directory_location%"

:: Global Variables
set "PIP_EXE_TO_USE="
set "PYTHON_EXE_TO_USE="
set "AOCL_DIR="
set ATTEMPTS=0
set PYTORCH_VERSION=2.1.2
set TORCHVISION_VERSION=0.16.2
set TORCHAUDIO_VERSION=2.1.2

:: Find Python 3.10 and pip
set "PYTHON_EXE_TO_USE="
set "PIP_EXE_TO_USE="
set "PYTHON_FOLDER_TO_USE="

for %%I in (
    "C:\Python310\python.exe"
    "C:\Program Files\Python310\"
    "C:\Program Files (x86)\Python310\"
    "%LocalAppData%\Programs\Python\Python310\"
) do (
    if exist "%%~I" (
        set "PYTHON_FOLDER_TO_USE=%%~I"
        set "PYTHON_EXE_TO_USE=%%~dpI\python.exe"
        set "PIP_EXE_TO_USE=%%~dpI\Scripts\pip.exe"
        goto :found_python310
    )
)



echo Python 3.10 not found. Please install Python 3.10 to a default directory.
goto :end_of_file

:found_python310
if not exist "%PIP_EXE_TO_USE%" (
    echo pip not found in the expected location for Python 3.10.
    goto :end_of_file
)

echo Using Python 3.10 Folder: "%PYTHON_FOLDER_TO_USE%"
echo Using Python 3.10: "%PYTHON_EXE_TO_USE%"
echo Using Pip 3.10: "%PIP_EXE_TO_USE%"


:: Verify AOCL directory
set AOCL_KEY_FILE=amd-blis\lib\LP64\AOCL-LibBlis-Win-dll.dll
for %%I in (%AOCL_KEY_FILE%) do set "AOCL_DIR=%%~$PATH:I"

if not defined AOCL_DIR (
    echo AOCL not found in PATH. Searching common locations...
    for %%I in (
        "C:\Progra~1\AMD\AOCL-Windows\%AOCL_KEY_FILE%"
        "C:\Progra~2\AMD\AOCL-Windows\%AOCL_KEY_FILE%"
        "C:\AMD\AOCL-Windows\%AOCL_KEY_FILE%"
    ) do (
        if exist "%%~I" (
            set "AOCL_DIR=%%~dpI"
            goto :found_aocl
        )
    )
    echo AOCL not found. Please enter the AOCL directory manually.
    set /p "AOCL_DIR=Please enter the full path to the AOCL directory: "
    if not exist "%AOCL_DIR%\%AOCL_KEY_FILE%" (
        echo Invalid AOCL directory. Exiting script.
        goto :end_of_file
    )
)

:found_aocl
echo Using AOCL: "%AOCL_DIR%"

:: Define library and include paths for AOCL
set "AOCL_LIB_PATH=%AOCL_DIR%\amd-blis\lib;%AOCL_DIR%\amd-libflame\lib;%AOCL_DIR%\amd-fftw\lib"
set "AOCL_INCLUDE_PATH=%AOCL_DIR%\amd-blis\include;%AOCL_DIR%\amd-libflame\include;%AOCL_DIR%\amd-fftw\include"

:: Uninstall existing versions
echo Uninstalling existing versions of PyTorch, torchvision, and torchaudio...
"%PIP_EXE_TO_USE%" uninstall torch torchvision torchaudio -y

:: Create Cython constraint file
echo Cython^<3 > "%working_directory%cython_constraint.txt"

:: Updating Python for Completeness
"%PYTHON_EXE_TO_USE%" -m pip install --upgrade pip wheel

:: Install build dependencies with version pinning
echo Installing build dependencies...
set "PIP_CONSTRAINT=%working_directory_location%\cython_constraint.txt"
"%PIP_EXE_TO_USE%" install -r %working_directory_location%\cython_constraint.txt ninja==1.10.2 pyyaml==5.4.1 cmake==3.20.2 cffi==1.14.5 typing_extensions==3.10.0.0 future==0.18.2 six==1.16.0 requests==2.25.1 dataclasses==0.6

:: Set up Visual Studio environment
for /f "usebackq tokens=*" %%i in (`"C:\Progra~2\Microsoft Visual Studio\Installer\vswhere.exe" -version [15^,17^) -products * -latest -property installationPath`) do (
    if not exist "%%i\VC\Auxiliary\Build\vcvarsall.bat" (
        echo Visual Studio environment not found. Please ensure Visual Studio with C++ build tools is installed.
        goto :end_of_file
    )
    call "%%i\VC\Auxiliary\Build\vcvarsall.bat" x64
)

:: Set environment variables for CPU build with AVX2 and AOCL
set CMAKE_ARGS=-DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:PATH="%PYTHON_EXE_TO_USE%" -DCMAKE_INSTALL_PREFIX:PATH=..\pytorch-install -DUSE_CUDA=0 -DUSE_CUDNN=0 -DUSE_MKLDNN=0 -DUSE_FBGEMM=1 -DUSE_QNNPACK=1 -DUSE_NNPACK=1 -DUSE_XNNPACK=1 -DUSE_AVX2=1 -DUSE_OPENMP=1 -DCMAKE_LIBRARY_PATH="%AOCL_LIB_PATH%" -DCMAKE_INCLUDE_PATH="%AOCL_INCLUDE_PATH%"
set BUILD_TEST=0
set USE_CUDA=0
set USE_DISTRIBUTED=0
set MAX_JOBS=4

:: Set compiler flags for AVX2
set CFLAGS=/arch:AVX2
set CXXFLAGS=/arch:AVX2

:: Explicitly set CUDA_HOME to an empty string (we are not using cuda, we are using avx2 with aocl)
set CUDA_HOME=

:: Start of Section Install Torch + Visual + Audio
echo Plan: Download and Build PyTorch, TorchVision, TorchAudio.

:: Download and build PyTorch
echo 1. Download and build PyTorch.
echo Downloading PyTorch version %PYTORCH_VERSION%...
pushd "%working_directory_location%"
if exist "PyTorch" (
    echo Deleting existing "%working_directory_location%\PyTorch\"...
    rmdir /s /q ".\PyTorch"
)
if exist "pytorch.zip" (
    echo Using existing "pytorch.zip"...
    goto :extraction_pytorch
)
echo Downloading PyTorch version %PYTORCH_VERSION%...
powershell -command "Invoke-WebRequest https://github.com/pytorch/pytorch/archive/refs/tags/v%PYTORCH_VERSION%.zip -OutFile pytorch.zip"
:extraction_pytorch
echo Extracting PyTorch...
powershell -command "Expand-Archive -Path pytorch.zip -DestinationPath PyTorch -Force"
cd ".\PyTorch\pytorch-%PYTORCH_VERSION%"
git submodule update --init --recursive
"%PYTHON_EXE_TO_USE%" setup.py install
echo Building PyTorch...
"%PYTHON_EXE_TO_USE%" setup.py develop

:: Build and install torchvision
echo 2. Download and build TorchVision.
echo Downloading TorchVision version %TORCHVISION_VERSION%...
pushd "%working_directory_location%"
if exist "TorchVision" (
    echo Deleting existing "%working_directory_location%\TorchVision\"...
    rmdir /s /q ".\TorchVision"
)
if exist "torchvision.zip" (
    echo Using existing "torchvision.zip"...
    goto :extraction_torchvision
)
echo Downloading TorchVision...
powershell -command "Invoke-WebRequest https://github.com/pytorch/vision/archive/refs/tags/v%TORCHVISION_VERSION%.zip -OutFile torchvision.zip"
:extraction_torchvision
echo Extracting TorchVision...
powershell -command "Expand-Archive -Path torchvision.zip -DestinationPath TorchVision -Force"
cd ".\TorchVision\vision-%TORCHVISION_VERSION%"
"%PYTHON_EXE_TO_USE%" setup.py install --no-cuda

:: Build and install torchaudio
echo 3. Download and build TorchAudio...
echo Downloading TorchAudio version %TORCHAUDIO_VERSION%...
pushd "%working_directory_location%"
if exist "TorchAudio" (
    echo Deleting existing "%working_directory_location%\TorchAudio\"...
    rmdir /s /q ".\TorchAudio"
)
if exist "torchaudio.zip" (
    echo Using existing "torchaudio.zip"...
    goto :extraction_torchaudio
)
echo Downloading TorchAudio...
powershell -command "Invoke-WebRequest https://github.com/pytorch/audio/archive/refs/tags/v%TORCHAUDIO_VERSION%.zip -OutFile torchaudio.zip"
:extraction_torchaudio
echo Extracting TorchAudio...
powershell -command "Expand-Archive -Path torchaudio.zip -DestinationPath TorchAudio -Force"
cd ".\TorchAudio\audio-%TORCHAUDIO_VERSION%"
"%PYTHON_EXE_TO_USE%" setup.py install --no-cuda

echo PyTorch, torchvision, and torchaudio processes finished for build and install.
goto :end_of_file

:: Exit Program
:end_of_file
:: Delete the Cython constraint file
pushd "%working_directory_location%"
del /f /q cython_constraint.txt

echo Script execution completed. Please review the output above for any errors or warnings.
echo Closing in 15 seconds...
rem timeout /t 15
pause
exit /b
